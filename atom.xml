<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刀刀的修炼之路</title>
  
  <subtitle>super daodao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-17T11:37:35.285Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>赵一刀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>map &amp; flatMap in Scala</title>
    <link href="http://yoursite.com/2020/11/17/map-flatMap-in-Scala/"/>
    <id>http://yoursite.com/2020/11/17/map-flatMap-in-Scala/</id>
    <published>2020-11-17T11:36:37.000Z</published>
    <updated>2020-11-17T11:37:35.285Z</updated>
    
    <content type="html"><![CDATA[<p>用scala有段时间了，这篇文章是想总结一下<code>map</code>和<code>flapMap</code>的原理和用法</p><h2 id="Scala-Native"><a href="#Scala-Native" class="headerlink" title="Scala Native"></a>Scala Native</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val l = List(10, 20, 30)</span><br><span class="line">val res: List[Option[Int]] = l.map(v =&gt; if(v &lt; 20) Some(v) else None)</span><br><span class="line"></span><br><span class="line">// res = List(Some(10), None, None)</span><br></pre></td></tr></table></figure><p>从这例子我们可以看到，对一个int型的List进行遍历，当数值小于20，就返回Some(value)，否则返回None。</p><p>即我们通过这个map把List里的元素根据一定的逻辑转换成了Option类型，这也符合map的源码，把List里的元素，从类型A转换到类型B,最后返回<code>List[B]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final override def map[B](f: A =&gt; B): List[B]</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val l = List(10, 20, 30)</span><br><span class="line">val res: List[Int] = l.flatMap(v =&gt; if(v &lt; 20) Some(v) else None)</span><br><span class="line"></span><br><span class="line">// res = List(10)</span><br></pre></td></tr></table></figure><p>可以看出来flatMap比map多做的一个操作是，把<code>List(Some(10), None, None)</code>转换成<code>List(10)</code>, 查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final override def flatMap[B](f: A =&gt; IterableOnce[B]): List[B]</span><br></pre></td></tr></table></figure><p>可以看出来flatMap是把类型A转换成了IterableOnce类型, 这里能说明Option是IterableOnce的子类。</p><p>但是为什么最后返回的是Int类型？是什么操作把IterableOnce类型转换成了Int类型？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val l = List(10, 20, 30)</span><br><span class="line">val res: List[Option[Int]] = l.map(v =&gt; if(v &lt; 20) Some(v) else None)</span><br><span class="line">val res1: List[Int] = res.flatten</span><br><span class="line"></span><br><span class="line">// res = List(Some(10), None, None)</span><br><span class="line">// res1 = List(10)</span><br></pre></td></tr></table></figure><p>看起来是flatMap比map多调用了flatten方法。</p><p>对res做flatten操作之后可以看到原来res里的Option类型的元素都被“拍平”了，那么是谁帮我们做了这件事呢？显而易见是scala内置的方法，应该是Option里把这个方法implicit了，这里我们不深究</p><p><strong><em>OK，到这儿基本可以总结一下了，flatMap = map + flatten</em></strong></p><p>另外补充两点：</p><ul><li><p>flatMap只能把List里的元素拍平一层。<br>比如把<code>Option[String]</code> 解成 <code>String</code>，并不能直接解成 <code>Char</code>，根本原因是只能implicit一次。</p></li><li><p>flatMap并不是能把任何类型都能解开。</p></li></ul><p>比如我们自己定义一个<code>case class Person(age: Int)</code>，然后在调用flatMap的时候给了一个<code>Int =&gt; Person</code>的方法，那么编译器会报错，因为他没有找到一个<code>Person =&gt; IterableOnce</code>的方法。刚才我们说Option里一定有一个implicit的方法就是这个原因。</p><h2 id="Cats-IO"><a href="#Cats-IO" class="headerlink" title="Cats IO"></a>Cats IO</h2><h3 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val io = IO(5)</span><br><span class="line">val r1: IO[Boolean] = io.map(v =&gt; if(v &gt; 3) true else false)</span><br><span class="line">print(r1.unsafeRunSync())  //true</span><br></pre></td></tr></table></figure><p>这里调用的map是cats库里的map，可以拿到IO里的元素然后根据传入的参数进行转换，源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final def map[B](f: A =&gt; B): IO[B]</span><br></pre></td></tr></table></figure><p>套用到刚才给的例子里，我们传入一个Int =&gt; Boolean的方法，然后map会返回一个<code>IO[Boolean]</code></p><h3 id="flatMap-1"><a href="#flatMap-1" class="headerlink" title="flatMap"></a>flatMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val io = IO(5)</span><br><span class="line">val r1: IO[Boolean] = io.flatMap(v =&gt; if(v &gt; 3) IO(true) else IO(false))</span><br><span class="line">val r: IO[IO[Boolean]] = io.map(v =&gt; if(v &gt; 3) IO(true) else IO(false))</span><br><span class="line">print(r1.unsafeRunSync())   //true</span><br><span class="line">print(r1.unsafeRunSync().unsafeRunSync())   //true</span><br></pre></td></tr></table></figure><p>可以看出来，跟map的区别是，IO的flatMap可以把返回的IO再解开，源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final def flatMap[B](f: A =&gt; IO[B]): IO[B]</span><br></pre></td></tr></table></figure><p>所以一般遇到需要用IO的flatMap的场景一般是需要raise error，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val r1: IO[Boolean] = io.flatMap(v =&gt; if(v &gt; 3) IO(true) else IO.raiseError(new RuntimeException))</span><br></pre></td></tr></table></figure><p>因为返回的类型是一定的，所以不能前一半返回Boolean，后一半返回IO，这时如果使用flatMap就会方便许多</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>之前举的几个例子都比较简单，如果遇到了复杂的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val r = List(Some(List(Some(10), Some(20), None)),</span><br><span class="line">        Some(List(Some(20), Some(30), Some(40))),</span><br><span class="line">        Some(List(Some(3))), None)</span><br><span class="line">      </span><br><span class="line">val result = r.flatMap(v =&gt; &#123;</span><br><span class="line">if(v.get.size &gt; 1)</span><br><span class="line">    v.get.flatMap(n =&gt; if(n.getOrElse(0) &gt; 10) n else None)</span><br><span class="line">else</span><br><span class="line">    None</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">//result = List(20, 20, 30, 40)</span><br></pre></td></tr></table></figure><p>这里模拟了一个比较复杂的场景，就是比如有一个类型为<code>List[Option[List[Option[Int]]]]</code>的变量，然后设置一些condition，最终我们希望得到一个类型为<code>List[Int]</code>的结果。</p><p>可能逻辑有点奇怪复杂并且莫名其妙，那是因为这个例子是我自己想的哈哈。其实我只是想说当出现flatMap或map层层嵌套的时候，代码看起来就很复杂，可读性断崖式下跌，反正我瞟一眼就不想仔细看里面的逻辑了，那咋办呢？</p><p>我们可以利用scala提供的一个语法糖<code>for</code>来让代码更简洁易懂，用for重构之后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for&#123;</span><br><span class="line">    r1 &lt;- input</span><br><span class="line">    r2 &lt;- if(r1.getOrElse(List()).size &gt; 1) r1.get else List()</span><br><span class="line">    r3 &lt;- if(r2.getOrElse(0) &gt; 10) r2 else None</span><br><span class="line">&#125; yield r3</span><br></pre></td></tr></table></figure><p>这里的input就是上面提到的那个复杂的类型，然后在for里，用<code>&lt;-</code>来解一次之后，r1的类型就是<code>Option[List[Option[Int]]]</code>，然后我们用刚才的condition来对r1进行判断，并且也解一次，得到了类型为<code>Option[Int]</code>的r2(<code>r1.get</code>的类型为<code>List[Option[Int]]</code>，被<code>&lt;-</code>解开之后得到了类型为<code>Option[Int]</code>的r2)。再用刚才的第二个条件来操作，得到了类型为<code>Int</code>的r3。</p><p>这样写就简洁很多，把两个condition这样列出来明显增加了可读性。<br>IO的flatMap也可以用for来重构，并且这是我们经常使用的方式。</p><p>一些补充：</p><ul><li>虽然我们yield了类型为Int的r3，但是最后得到的还是一个<code>List[Int]</code>，原因是for其实就是map和flatMap的语法糖，所以List最后还会还是List，r3是最外层List的一个元素而已。</li><li>for的第一行一定要用<code>&lt;-</code>运算符，因为每个使用了<code>&lt;-</code>的语句是一个generator，for-comprehension一定要需要以一个generator开始（具体原因会在后续关于for-comprehension的文章里探讨，这里不深究啦）</li></ul><p>最后一句：<em>有问题欢迎沟通交流或批评指正～</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用scala有段时间了，这篇文章是想总结一下&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;flapMap&lt;/code&gt;的原理和用法&lt;/p&gt;
&lt;h2 id=&quot;Scala-Native&quot;&gt;&lt;a href=&quot;#Scala-Native&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="Scala" scheme="http://yoursite.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建博客遇到的一些问题总结</title>
    <link href="http://yoursite.com/2019/09/11/hexo-build-blog/"/>
    <id>http://yoursite.com/2019/09/11/hexo-build-blog/</id>
    <published>2019-09-11T08:59:57.000Z</published>
    <updated>2019-09-12T01:52:18.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>  一开始，我是把图片放到本地，然后在文章中使用<code>![]()</code>相对路径的方式引入图片，但是本地看着没有问题，运行起来就会出现图片不显示的问题，可能是有需要配置的地方漏掉了。而且把图片存在本地也会有图片越来越多，整个文件越来越大的问题，所以我就把图片全都存在了cloudinary里。</p><p>  <a href="https://cloudinary.com" target="_blank" rel="noopener">cloudinary</a>是一个免费的，类似于百度云的网站，可以自己上传图片，然后就可以通过生成的网址来访问这张图片。用在博客里非常方便，并且也不会有占用内存的情况。</p><p>  <img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568193252/blog/2019.9.11/WechatIMG99_bpzh0o.png" alt></p><p>  图片上传成功后，可以直接点击copy url的按钮复制链接，非常的方便容易上手。</p><h2 id="访问域名404"><a href="#访问域名404" class="headerlink" title="访问域名404"></a>访问域名404</h2><p>  我第二次deploy的时候，发现怎么都不能通过我购买的域名来访问博客了，只能通过githubPage的url来访问，访问我购买的域名一直显示的是404，一度以为我的域名坏掉了，后来才发现我repo的设置github Page的custom domain部分被清空了</p><p>  <img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568193731/blog/2019.9.11/WechatIMG100_kwfgl2.png" alt></p><p>  原来是每次提交之后都会刷新这部分内容，如果要通过域名访问，这部分是必须要如图填写的。</p><p>  但是难道每次deploy之后都得来设置一下吗？这也太麻烦了，上网查了一下，原来只要在博客目录下的source目录下添加一个名为<code>CNAME</code>的文件，里面写入自己的域名即可，具体操作如下图</p><p>  <img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568193878/blog/2019.9.11/WechatIMG102_wnbuf5.png" alt></p><p>  deploy之后，查看github repo的设置，当github Page部分的设置显示这样，就意味着域名部分的设置已经成功啦～</p><p>  <img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568193731/blog/2019.9.11/WechatIMG101_q5uz8f.png" alt></p><h2 id="一些常用的hexo命令"><a href="#一些常用的hexo命令" class="headerlink" title="一些常用的hexo命令"></a>一些常用的hexo命令</h2><ul><li><code>hexo new &quot;blogName&quot; //新建文章（可以缩写为 hexo n &quot;blogName&quot;）</code></li><li><code>hexo generate //生成静态文件（可以缩写为 hexo g）</code></li><li><code>hexo server   //启动本地服务（可以缩写为 hexo s）</code></li><li><code>hexo deploy   //部署到github（可以缩写为 hexo d）</code></li><li><code>hexo help  //查看帮助</code></li><li><code>hexo s -g  //组合命令：生成静态文件并启动本地服务</code></li><li><code>hexo d -g  //组合命令：生成静态文件并部署到github</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;上传图片&quot;&gt;&lt;a href=&quot;#上传图片&quot; class=&quot;headerlink&quot; title=&quot;上传图片&quot;&gt;&lt;/a&gt;上传图片&lt;/h2&gt;&lt;p&gt;  一开始，我是把图片放到本地，然后在文章中使用&lt;code&gt;![]()&lt;/code&gt;相对路径的方式引入图片，但是本地看着没有
      
    
    </summary>
    
    
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo g 无法生成 index.html 文件</title>
    <link href="http://yoursite.com/2019/09/10/hexo-g-failed/"/>
    <id>http://yoursite.com/2019/09/10/hexo-g-failed/</id>
    <published>2019-09-10T08:40:46.000Z</published>
    <updated>2019-09-12T01:52:12.664Z</updated>
    
    <content type="html"><![CDATA[<p>今天在对博客进行一些基本设置之后，在执行hexo generate的时候，突然出现了很多错误</p><p><img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568105226/blog/WX20190910-162738_2x_kj8so5.png" alt></p><p>看提示我们知道，是依赖加载失败了，导致很多文件没有创建成功。</p><p>这时我们需要运行一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls --depth 0</span><br></pre></td></tr></table></figure><p>来查看依赖安装情况，我的执行结果如下图</p><p><img src="https://res.cloudinary.com/dehonlurm/image/upload/v1568105226/blog/npm_command_run_result_20190910_fi8t7e.png" alt></p><p>可以看出有五个包都missing了，所以我们只需要挨个执行npm install就可以了，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-archive@^0.1.5</span><br></pre></td></tr></table></figure><p>把该安装的依赖安装好，就可以愉快的执行hexo g 和 hexo s 在本地启动啦～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在对博客进行一些基本设置之后，在执行hexo generate的时候，突然出现了很多错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dehonlurm/image/upload/v1568105226/blog/WX2019
      
    
    </summary>
    
    
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
